<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2020

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:vmf="http://www.altova.com/MapForce/UDF/vmf" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="vmf xs fn">
	<xsl:template name="vmf:vmf1_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='Debit note related to goods or services'">
				<xsl:copy-of select="'80'"/>
			</xsl:when>
			<xsl:when test="$input='Metered services invoice'">
				<xsl:copy-of select="'82'"/>
			</xsl:when>
			<xsl:when test="$input='Debit note related to financial adjustments'">
				<xsl:copy-of select="'84'"/>
			</xsl:when>
			<xsl:when test="$input='SalesInvoice'">
				<xsl:copy-of select="'380'"/>
			</xsl:when>
			<xsl:when test="$input='Debit note'">
				<xsl:copy-of select="'383'"/>
			</xsl:when>
			<xsl:when test="$input='PrepaymentInvoice'">
				<xsl:copy-of select="'386'"/>
			</xsl:when>
			<xsl:when test="$input='Factored invoice'">
				<xsl:copy-of select="'393'"/>
			</xsl:when>
			<xsl:when test="$input='Consignment invoice'">
				<xsl:copy-of select="'395'"/>
			</xsl:when>
			<xsl:when test="$input=&quot;Insurer's invoice&quot;">
				<xsl:copy-of select="'575'"/>
			</xsl:when>
			<xsl:when test="$input=&quot;Forwarder's invoice&quot;">
				<xsl:copy-of select="'623'"/>
			</xsl:when>
			<xsl:when test="$input='Freight invoice'">
				<xsl:copy-of select="'780'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf2_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='E'">
				<xsl:copy-of select="'ELECTRONIC'"/>
			</xsl:when>
			<xsl:when test="$input='P'">
				<xsl:copy-of select="'PAPER'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf3_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='PIECE'">
				<xsl:copy-of select="'H87'"/>
			</xsl:when>
			<xsl:when test="$input='KILOGRAM'">
				<xsl:copy-of select="'KGM'"/>
			</xsl:when>
			<xsl:when test="$input='TON'">
				<xsl:copy-of select="'TNE'"/>
			</xsl:when>
			<xsl:when test="$input='KWH'">
				<xsl:copy-of select="'D03'"/>
			</xsl:when>
			<xsl:when test="$input='DAY'">
				<xsl:copy-of select="'DAY'"/>
			</xsl:when>
			<xsl:when test="$input='HOUR'">
				<xsl:copy-of select="'HUR'"/>
			</xsl:when>
			<xsl:when test="$input='MINUTE'">
				<xsl:copy-of select="'MIN'"/>
			</xsl:when>
			<xsl:when test="$input='MONTH'">
				<xsl:copy-of select="'M36'"/>
			</xsl:when>
			<xsl:when test="$input='LITER'">
				<xsl:copy-of select="'LTR'"/>
			</xsl:when>
			<xsl:when test="$input='KILOMETER'">
				<xsl:copy-of select="'KMT'"/>
			</xsl:when>
			<xsl:when test="$input='CUBIC_METER'">
				<xsl:copy-of select="'MTQ'"/>
			</xsl:when>
			<xsl:when test="$input='METER'">
				<xsl:copy-of select="'MTR'"/>
			</xsl:when>
			<xsl:when test="$input='LINEAR_METER'">
				<xsl:copy-of select="'LM'"/>
			</xsl:when>
			<xsl:when test="$input='CARTON'">
				<xsl:copy-of select="'DZP'"/>
			</xsl:when>
			<xsl:when test="$input='PACK'">
				<xsl:copy-of select="'NMP'"/>
			</xsl:when>
			<xsl:when test="$input='OWN'">
				<xsl:copy-of select="'ZZ'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:output method="xml" encoding="UTF-8" byte-order-mark="no" indent="yes"/>
	<xsl:template match="/">
		<xsl:variable name="var35_BavInvoice" as="node()?" select="BavInvoice"/>
		<Invoice xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" xmlns:xades="http://uri.etsi.org/01903/v1.3.2#" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" xmlns:ext="urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2" xmlns:n0="urn:oasis:names:specification:ubl:schema:xsd:CommonSignatureComponents-2" xmlns:qdt="urn:oasis:names:specification:ubl:schema:xsd:QualifiedDataTypes-2" xmlns:sac="urn:oasis:names:specification:ubl:schema:xsd:SignatureAggregateComponents-2" xmlns:sbc="urn:oasis:names:specification:ubl:schema:xsd:SignatureBasicComponents-2" xmlns:udt="urn:oasis:names:specification:ubl:schema:xsd:UnqualifiedDataTypes-2" xmlns:cct="urn:un:unece:uncefact:data:specification:CoreComponentTypeSchemaModule:2">
			<xsl:attribute name="xsi:schemaLocation" select="'urn:oasis:names:specification:ubl:schema:xsd:Invoice-2 file:///C:/Users/marks/Downloads/commons-libs/commons-libs/commons-ubl21/src/main/xsd/maindoc/UBL-Invoice-2.1.xsd'"/>
			<cbc:CustomizationID>urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0</cbc:CustomizationID>
			<xsl:for-each select="$var35_BavInvoice/*:ID[fn:namespace-uri() eq '']">
				<cbc:ID>
					<xsl:sequence select="fn:string(.)"/>
				</cbc:ID>
			</xsl:for-each>
			<xsl:for-each select="$var35_BavInvoice">
				<cbc:IssueDate>
					<xsl:sequence select="xs:string(xs:date(fn:string(*:IssueDate[fn:namespace-uri() eq ''])))"/>
				</cbc:IssueDate>
			</xsl:for-each>
			<xsl:for-each select="$var35_BavInvoice/*:IssueTime[fn:namespace-uri() eq '']">
				<cbc:IssueTime>
					<xsl:sequence select="xs:string(xs:time(fn:string(.)))"/>
				</cbc:IssueTime>
			</xsl:for-each>
			<xsl:for-each select="$var35_BavInvoice">
				<cbc:DueDate>
					<xsl:sequence select="xs:string(xs:date(fn:string(*:DueDate[fn:namespace-uri() eq ''])))"/>
				</cbc:DueDate>
			</xsl:for-each>
			<xsl:for-each select="$var35_BavInvoice">
				<xsl:variable name="var1_resultof_vmf__inputtoresult" as="xs:string?">
					<xsl:call-template name="vmf:vmf1_inputtoresult">
						<xsl:with-param name="input" select="fn:string(*:InvoiceTypeCode[fn:namespace-uri() eq ''])" as="xs:string"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:for-each select="$var1_resultof_vmf__inputtoresult">
					<cbc:InvoiceTypeCode>
						<xsl:sequence select="."/>
					</cbc:InvoiceTypeCode>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="$var35_BavInvoice/*:Note[fn:namespace-uri() eq '']">
				<cbc:Note>
					<xsl:sequence select="fn:string(.)"/>
				</cbc:Note>
			</xsl:for-each>
			<xsl:for-each select="$var35_BavInvoice/*:selfBilling[fn:namespace-uri() eq '']">
				<cbc:Note>
					<xsl:sequence select="fn:concat('selfBilling:', xs:string(xs:boolean(fn:string(.))))"/>
				</cbc:Note>
			</xsl:for-each>
			<xsl:for-each select="$var35_BavInvoice/*:cashAccounting[fn:namespace-uri() eq '']">
				<cbc:Note>
					<xsl:sequence select="fn:concat('cashAccounting:', xs:string(xs:boolean(fn:string(.))))"/>
				</cbc:Note>
			</xsl:for-each>
			<xsl:for-each select="$var35_BavInvoice/*:ModifyWithoutMaster[fn:namespace-uri() eq '']">
				<cbc:Note>
					<xsl:sequence select="fn:concat('modifyWithoutMaster:', xs:string(xs:boolean(fn:string(.))))"/>
				</cbc:Note>
			</xsl:for-each>
			<xsl:for-each select="$var35_BavInvoice">
				<xsl:variable name="var2_resultof_vmf__inputtoresult" as="xs:string?">
					<xsl:call-template name="vmf:vmf2_inputtoresult">
						<xsl:with-param name="input" select="fn:string(*:OutputType[fn:namespace-uri() eq ''])" as="xs:string"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:for-each select="$var2_resultof_vmf__inputtoresult">
					<cbc:Note>
						<xsl:sequence select="."/>
					</cbc:Note>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="$var35_BavInvoice">
				<cbc:TaxPointDate>
					<xsl:sequence select="xs:string(xs:date(fn:string(*:TaxPointDate[fn:namespace-uri() eq ''])))"/>
				</cbc:TaxPointDate>
			</xsl:for-each>
			<xsl:for-each select="$var35_BavInvoice">
				<cbc:DocumentCurrencyCode>
					<xsl:sequence select="fn:string(*:DocumentCurrencyCode[fn:namespace-uri() eq ''])"/>
				</cbc:DocumentCurrencyCode>
			</xsl:for-each>
			<xsl:for-each select="$var35_BavInvoice/*:InvoicePeriod[fn:namespace-uri() eq '']">
				<cac:InvoicePeriod>
					<xsl:for-each select="*:StartDate[fn:namespace-uri() eq '']">
						<cbc:StartDate>
							<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
						</cbc:StartDate>
					</xsl:for-each>
					<xsl:for-each select="*:EndDate[fn:namespace-uri() eq '']">
						<cbc:EndDate>
							<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
						</cbc:EndDate>
					</xsl:for-each>
					<xsl:for-each select="*:Description[fn:namespace-uri() eq '']">
						<cbc:Description>
							<xsl:sequence select="fn:string(.)"/>
						</cbc:Description>
					</xsl:for-each>
				</cac:InvoicePeriod>
			</xsl:for-each>
			<cac:OrderReference>
				<xsl:for-each select="$var35_BavInvoice/*:OrderReference[fn:namespace-uri() eq '']">
					<cbc:ID>
						<xsl:for-each select="@schemeID">
							<xsl:attribute name="schemeID" namespace="" select="fn:string(.)"/>
						</xsl:for-each>
						<xsl:sequence select="fn:string(.)"/>
					</cbc:ID>
				</xsl:for-each>
			</cac:OrderReference>
			<xsl:for-each select="$var35_BavInvoice/*:BillingReference[fn:namespace-uri() eq '']">
				<cac:BillingReference>
					<xsl:for-each select="*:InvoiceDocumentReference[fn:namespace-uri() eq '']">
						<cac:InvoiceDocumentReference>
							<cbc:ID>
								<xsl:sequence select="fn:string(*:ID[fn:namespace-uri() eq ''])"/>
							</cbc:ID>
							<cbc:DocumentDescription>
								<xsl:sequence select="fn:string(*:DocumentDescription[fn:namespace-uri() eq ''])"/>
							</cbc:DocumentDescription>
						</cac:InvoiceDocumentReference>
					</xsl:for-each>
					<xsl:for-each select="*:BillingReferenceLine[fn:namespace-uri() eq '']">
						<cac:BillingReferenceLine>
							<cbc:ID>
								<xsl:sequence select="fn:string(*:ID[fn:namespace-uri() eq ''])"/>
							</cbc:ID>
						</cac:BillingReferenceLine>
					</xsl:for-each>
				</cac:BillingReference>
			</xsl:for-each>
			<xsl:for-each select="$var35_BavInvoice">
				<xsl:variable name="var7_AccountingSupplierParty" as="node()" select="*:AccountingSupplierParty[fn:namespace-uri() eq '']"/>
				<cac:AccountingSupplierParty>
					<xsl:for-each select="$var7_AccountingSupplierParty/*:AdditionalAccountID[fn:namespace-uri() eq '']">
						<cbc:AdditionalAccountID>
							<xsl:sequence select="fn:string(.)"/>
						</cbc:AdditionalAccountID>
					</xsl:for-each>
					<cac:Party>
						<xsl:for-each select="$var7_AccountingSupplierParty/*:WebsiteURL[fn:namespace-uri() eq '']">
							<cbc:WebsiteURI>
								<xsl:sequence select="xs:string(xs:anyURI(fn:string(.)))"/>
							</cbc:WebsiteURI>
						</xsl:for-each>
						<xsl:variable name="var3_EndpointID" as="node()" select="$var7_AccountingSupplierParty/*:EndpointID[fn:namespace-uri() eq '']"/>
						<cbc:EndpointID>
							<xsl:for-each select="$var3_EndpointID/@schemeID">
								<xsl:attribute name="schemeID" namespace="" select="fn:string(.)"/>
							</xsl:for-each>
							<xsl:sequence select="fn:string($var3_EndpointID)"/>
						</cbc:EndpointID>
						<cac:PartyIdentification>
							<xsl:for-each select="$var7_AccountingSupplierParty/*:PartyIdentification[fn:namespace-uri() eq '']">
								<cbc:ID>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:ID>
							</xsl:for-each>
						</cac:PartyIdentification>
						<cac:PartyName>
							<cbc:Name>
								<xsl:sequence select="fn:string($var7_AccountingSupplierParty/*:PartyName[fn:namespace-uri() eq ''])"/>
							</cbc:Name>
						</cac:PartyName>
						<xsl:for-each select="$var7_AccountingSupplierParty/*:PostalAddress[fn:namespace-uri() eq '']">
							<cac:PostalAddress>
								<xsl:for-each select="*:Floor[fn:namespace-uri() eq '']">
									<cbc:Floor>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:Floor>
								</xsl:for-each>
								<xsl:for-each select="*:Room[fn:namespace-uri() eq '']">
									<cbc:Room>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:Room>
								</xsl:for-each>
								<xsl:for-each select="*:StreetName[fn:namespace-uri() eq '']">
									<cbc:StreetName>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:StreetName>
								</xsl:for-each>
								<xsl:for-each select="*:AdditionalStreetName[fn:namespace-uri() eq '']">
									<cbc:AdditionalStreetName>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:AdditionalStreetName>
								</xsl:for-each>
								<xsl:for-each select="*:BlockName[fn:namespace-uri() eq '']">
									<cbc:BlockName>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:BlockName>
								</xsl:for-each>
								<xsl:for-each select="*:BuildingNumber[fn:namespace-uri() eq '']">
									<cbc:BuildingNumber>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:BuildingNumber>
								</xsl:for-each>
								<xsl:for-each select="*:CityName[fn:namespace-uri() eq '']">
									<cbc:CityName>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:CityName>
								</xsl:for-each>
								<xsl:for-each select="*:PostalZone[fn:namespace-uri() eq '']">
									<cbc:PostalZone>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:PostalZone>
								</xsl:for-each>
								<xsl:for-each select="*:District[fn:namespace-uri() eq '']">
									<cbc:District>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:District>
								</xsl:for-each>
								<cac:AddressLine>
									<xsl:for-each select="*:AddressLine[fn:namespace-uri() eq '']">
										<cbc:Line>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:Line>
									</xsl:for-each>
								</cac:AddressLine>
								<xsl:for-each select="*:Country[fn:namespace-uri() eq '']">
									<cac:Country>
										<cbc:IdentificationCode>
											<xsl:sequence select="fn:string(*:IdentificationCode[fn:namespace-uri() eq ''])"/>
										</cbc:IdentificationCode>
										<cbc:Name>
											<xsl:sequence select="fn:string(*:Name[fn:namespace-uri() eq ''])"/>
										</cbc:Name>
									</cac:Country>
								</xsl:for-each>
							</cac:PostalAddress>
						</xsl:for-each>
						<xsl:for-each select="$var7_AccountingSupplierParty/*:PartyTaxScheme[fn:namespace-uri() eq '']">
							<cac:PartyTaxScheme>
								<cbc:CompanyID>
									<xsl:sequence select="fn:string(*:CompanyID[fn:namespace-uri() eq ''])"/>
								</cbc:CompanyID>
								<cac:TaxScheme>
									<cbc:ID>
										<xsl:sequence select="fn:string(*:TaxScheme[fn:namespace-uri() eq '']/*:ID[fn:namespace-uri() eq ''])"/>
									</cbc:ID>
								</cac:TaxScheme>
							</cac:PartyTaxScheme>
						</xsl:for-each>
						<xsl:variable name="var6_PartyLegalEntity" as="node()" select="$var7_AccountingSupplierParty/*:PartyLegalEntity[fn:namespace-uri() eq '']"/>
						<cac:PartyLegalEntity>
							<xsl:for-each select="$var6_PartyLegalEntity/*:RegistrationName[fn:namespace-uri() eq '']">
								<cbc:RegistrationName>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:RegistrationName>
							</xsl:for-each>
							<xsl:for-each select="$var6_PartyLegalEntity/*:CompanyID[fn:namespace-uri() eq '']">
								<cbc:CompanyID>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:CompanyID>
							</xsl:for-each>
							<xsl:variable name="var5_RegistrationAddress" as="node()" select="$var6_PartyLegalEntity/*:RegistrationAddress[fn:namespace-uri() eq '']"/>
							<cac:RegistrationAddress>
								<xsl:for-each select="$var5_RegistrationAddress/*:Floor[fn:namespace-uri() eq '']">
									<cbc:Floor>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:Floor>
								</xsl:for-each>
								<xsl:for-each select="$var5_RegistrationAddress/*:Room[fn:namespace-uri() eq '']">
									<cbc:Room>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:Room>
								</xsl:for-each>
								<xsl:for-each select="$var5_RegistrationAddress/*:StreetName[fn:namespace-uri() eq '']">
									<cbc:StreetName>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:StreetName>
								</xsl:for-each>
								<xsl:for-each select="$var5_RegistrationAddress/*:AdditionalStreetName[fn:namespace-uri() eq '']">
									<cbc:AdditionalStreetName>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:AdditionalStreetName>
								</xsl:for-each>
								<xsl:for-each select="$var5_RegistrationAddress/*:BlockName[fn:namespace-uri() eq '']">
									<cbc:BlockName>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:BlockName>
								</xsl:for-each>
								<xsl:for-each select="$var5_RegistrationAddress/*:BuildingNumber[fn:namespace-uri() eq '']">
									<cbc:BuildingNumber>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:BuildingNumber>
								</xsl:for-each>
								<cbc:CityName>
									<xsl:sequence select="fn:string($var5_RegistrationAddress/*:CityName[fn:namespace-uri() eq ''])"/>
								</cbc:CityName>
								<cbc:PostalZone>
									<xsl:sequence select="fn:string($var5_RegistrationAddress/*:PostalZone[fn:namespace-uri() eq ''])"/>
								</cbc:PostalZone>
								<xsl:for-each select="$var5_RegistrationAddress/*:District[fn:namespace-uri() eq '']">
									<cbc:District>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:District>
								</xsl:for-each>
								<cac:AddressLine>
									<cbc:Line>
										<xsl:sequence select="fn:string($var5_RegistrationAddress/*:AddressLine[fn:namespace-uri() eq ''])"/>
									</cbc:Line>
								</cac:AddressLine>
								<xsl:variable name="var4_Country" as="node()" select="$var5_RegistrationAddress/*:Country[fn:namespace-uri() eq '']"/>
								<cac:Country>
									<cbc:IdentificationCode>
										<xsl:sequence select="fn:string($var4_Country/*:IdentificationCode[fn:namespace-uri() eq ''])"/>
									</cbc:IdentificationCode>
									<cbc:Name>
										<xsl:sequence select="fn:string($var4_Country/*:Name[fn:namespace-uri() eq ''])"/>
									</cbc:Name>
								</cac:Country>
							</cac:RegistrationAddress>
						</cac:PartyLegalEntity>
						<xsl:for-each select="$var7_AccountingSupplierParty/*:Contact[fn:namespace-uri() eq '']">
							<cac:Contact>
								<xsl:for-each select="*:Telephone[fn:namespace-uri() eq '']">
									<cbc:Telephone>
										<xsl:if test="fn:not((fn:translate(fn:string(@xsi:nil), 'true ', '1') = '1'))">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:if>
									</cbc:Telephone>
								</xsl:for-each>
								<xsl:for-each select="*:Telefax[fn:namespace-uri() eq '']">
									<cbc:Telefax>
										<xsl:if test="fn:not((fn:translate(fn:string(@xsi:nil), 'true ', '1') = '1'))">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:if>
									</cbc:Telefax>
								</xsl:for-each>
								<xsl:for-each select="*:ElectronicMail[fn:namespace-uri() eq '']">
									<cbc:ElectronicMail>
										<xsl:if test="fn:not((fn:translate(fn:string(@xsi:nil), 'true ', '1') = '1'))">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:if>
									</cbc:ElectronicMail>
								</xsl:for-each>
							</cac:Contact>
						</xsl:for-each>
					</cac:Party>
				</cac:AccountingSupplierParty>
			</xsl:for-each>
			<xsl:for-each select="$var35_BavInvoice">
				<xsl:variable name="var12_AccountingCustomerParty" as="node()" select="*:AccountingCustomerParty[fn:namespace-uri() eq '']"/>
				<cac:AccountingCustomerParty>
					<xsl:for-each select="$var12_AccountingCustomerParty/*:AdditionalAccountID[fn:namespace-uri() eq '']">
						<cbc:AdditionalAccountID>
							<xsl:sequence select="fn:string(.)"/>
						</cbc:AdditionalAccountID>
					</xsl:for-each>
					<cac:Party>
						<xsl:for-each select="$var12_AccountingCustomerParty/*:WebsiteURL[fn:namespace-uri() eq '']">
							<cbc:WebsiteURI>
								<xsl:sequence select="xs:string(xs:anyURI(fn:string(.)))"/>
							</cbc:WebsiteURI>
						</xsl:for-each>
						<xsl:variable name="var8_EndpointID" as="node()" select="$var12_AccountingCustomerParty/*:EndpointID[fn:namespace-uri() eq '']"/>
						<cbc:EndpointID>
							<xsl:for-each select="$var8_EndpointID/@schemeID">
								<xsl:attribute name="schemeID" namespace="" select="fn:string(.)"/>
							</xsl:for-each>
							<xsl:sequence select="fn:string($var8_EndpointID)"/>
						</cbc:EndpointID>
						<cac:PartyIdentification>
							<xsl:for-each select="$var12_AccountingCustomerParty/*:PartyIdentification[fn:namespace-uri() eq '']">
								<cbc:ID>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:ID>
							</xsl:for-each>
						</cac:PartyIdentification>
						<cac:PartyName>
							<cbc:Name>
								<xsl:sequence select="fn:string($var12_AccountingCustomerParty/*:PartyName[fn:namespace-uri() eq ''])"/>
							</cbc:Name>
						</cac:PartyName>
						<xsl:for-each select="$var12_AccountingCustomerParty/*:PostalAddress[fn:namespace-uri() eq '']">
							<cac:PostalAddress>
								<xsl:for-each select="*:Floor[fn:namespace-uri() eq '']">
									<cbc:Floor>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:Floor>
								</xsl:for-each>
								<xsl:for-each select="*:Room[fn:namespace-uri() eq '']">
									<cbc:Room>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:Room>
								</xsl:for-each>
								<xsl:for-each select="*:StreetName[fn:namespace-uri() eq '']">
									<cbc:StreetName>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:StreetName>
								</xsl:for-each>
								<xsl:for-each select="*:AdditionalStreetName[fn:namespace-uri() eq '']">
									<cbc:AdditionalStreetName>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:AdditionalStreetName>
								</xsl:for-each>
								<xsl:for-each select="*:BlockName[fn:namespace-uri() eq '']">
									<cbc:BlockName>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:BlockName>
								</xsl:for-each>
								<xsl:for-each select="*:BuildingNumber[fn:namespace-uri() eq '']">
									<cbc:BuildingNumber>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:BuildingNumber>
								</xsl:for-each>
								<xsl:for-each select="*:CityName[fn:namespace-uri() eq '']">
									<cbc:CityName>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:CityName>
								</xsl:for-each>
								<xsl:for-each select="*:PostalZone[fn:namespace-uri() eq '']">
									<cbc:PostalZone>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:PostalZone>
								</xsl:for-each>
								<xsl:for-each select="*:District[fn:namespace-uri() eq '']">
									<cbc:District>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:District>
								</xsl:for-each>
								<cac:AddressLine>
									<xsl:for-each select="*:AddressLine[fn:namespace-uri() eq '']">
										<cbc:Line>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:Line>
									</xsl:for-each>
								</cac:AddressLine>
								<xsl:for-each select="*:Country[fn:namespace-uri() eq '']">
									<cac:Country>
										<cbc:IdentificationCode>
											<xsl:sequence select="fn:string(*:IdentificationCode[fn:namespace-uri() eq ''])"/>
										</cbc:IdentificationCode>
										<cbc:Name>
											<xsl:sequence select="fn:string(*:Name[fn:namespace-uri() eq ''])"/>
										</cbc:Name>
									</cac:Country>
								</xsl:for-each>
							</cac:PostalAddress>
						</xsl:for-each>
						<xsl:for-each select="$var12_AccountingCustomerParty/*:PartyTaxScheme[fn:namespace-uri() eq '']">
							<cac:PartyTaxScheme>
								<xsl:for-each select="*:CompanyID[fn:namespace-uri() eq '']">
									<cbc:CompanyID>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:CompanyID>
								</xsl:for-each>
								<cac:TaxScheme>
									<cbc:ID>
										<xsl:sequence select="fn:string(*:TaxScheme[fn:namespace-uri() eq '']/*:ID[fn:namespace-uri() eq ''])"/>
									</cbc:ID>
								</cac:TaxScheme>
							</cac:PartyTaxScheme>
						</xsl:for-each>
						<xsl:variable name="var11_PartyLegalEntity" as="node()" select="$var12_AccountingCustomerParty/*:PartyLegalEntity[fn:namespace-uri() eq '']"/>
						<cac:PartyLegalEntity>
							<xsl:for-each select="$var11_PartyLegalEntity/*:RegistrationName[fn:namespace-uri() eq '']">
								<cbc:RegistrationName>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:RegistrationName>
							</xsl:for-each>
							<xsl:for-each select="$var11_PartyLegalEntity/*:CompanyID[fn:namespace-uri() eq '']">
								<cbc:CompanyID>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:CompanyID>
							</xsl:for-each>
							<xsl:variable name="var10_RegistrationAddress" as="node()" select="$var11_PartyLegalEntity/*:RegistrationAddress[fn:namespace-uri() eq '']"/>
							<cac:RegistrationAddress>
								<xsl:for-each select="$var10_RegistrationAddress/*:Floor[fn:namespace-uri() eq '']">
									<cbc:Floor>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:Floor>
								</xsl:for-each>
								<xsl:for-each select="$var10_RegistrationAddress/*:Room[fn:namespace-uri() eq '']">
									<cbc:Room>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:Room>
								</xsl:for-each>
								<xsl:for-each select="$var10_RegistrationAddress/*:StreetName[fn:namespace-uri() eq '']">
									<cbc:StreetName>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:StreetName>
								</xsl:for-each>
								<xsl:for-each select="$var10_RegistrationAddress/*:AdditionalStreetName[fn:namespace-uri() eq '']">
									<cbc:AdditionalStreetName>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:AdditionalStreetName>
								</xsl:for-each>
								<xsl:for-each select="$var10_RegistrationAddress/*:BlockName[fn:namespace-uri() eq '']">
									<cbc:BlockName>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:BlockName>
								</xsl:for-each>
								<xsl:for-each select="$var10_RegistrationAddress/*:BuildingNumber[fn:namespace-uri() eq '']">
									<cbc:BuildingNumber>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:BuildingNumber>
								</xsl:for-each>
								<cbc:CityName>
									<xsl:sequence select="fn:string($var10_RegistrationAddress/*:CityName[fn:namespace-uri() eq ''])"/>
								</cbc:CityName>
								<cbc:PostalZone>
									<xsl:sequence select="fn:string($var10_RegistrationAddress/*:PostalZone[fn:namespace-uri() eq ''])"/>
								</cbc:PostalZone>
								<xsl:for-each select="$var10_RegistrationAddress/*:District[fn:namespace-uri() eq '']">
									<cbc:District>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:District>
								</xsl:for-each>
								<cac:AddressLine>
									<cbc:Line>
										<xsl:sequence select="fn:string($var10_RegistrationAddress/*:AddressLine[fn:namespace-uri() eq ''])"/>
									</cbc:Line>
								</cac:AddressLine>
								<xsl:variable name="var9_Country" as="node()" select="$var10_RegistrationAddress/*:Country[fn:namespace-uri() eq '']"/>
								<cac:Country>
									<cbc:IdentificationCode>
										<xsl:sequence select="fn:string($var9_Country/*:IdentificationCode[fn:namespace-uri() eq ''])"/>
									</cbc:IdentificationCode>
									<cbc:Name>
										<xsl:sequence select="fn:string($var9_Country/*:Name[fn:namespace-uri() eq ''])"/>
									</cbc:Name>
								</cac:Country>
							</cac:RegistrationAddress>
						</cac:PartyLegalEntity>
						<xsl:for-each select="$var12_AccountingCustomerParty/*:Contact[fn:namespace-uri() eq '']">
							<cac:Contact>
								<xsl:for-each select="*:Telephone[fn:namespace-uri() eq '']">
									<cbc:Telephone>
										<xsl:if test="fn:not((fn:translate(fn:string(@xsi:nil), 'true ', '1') = '1'))">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:if>
									</cbc:Telephone>
								</xsl:for-each>
								<xsl:for-each select="*:Telefax[fn:namespace-uri() eq '']">
									<cbc:Telefax>
										<xsl:if test="fn:not((fn:translate(fn:string(@xsi:nil), 'true ', '1') = '1'))">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:if>
									</cbc:Telefax>
								</xsl:for-each>
								<xsl:for-each select="*:ElectronicMail[fn:namespace-uri() eq '']">
									<cbc:ElectronicMail>
										<xsl:if test="fn:not((fn:translate(fn:string(@xsi:nil), 'true ', '1') = '1'))">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:if>
									</cbc:ElectronicMail>
								</xsl:for-each>
							</cac:Contact>
						</xsl:for-each>
					</cac:Party>
				</cac:AccountingCustomerParty>
			</xsl:for-each>
			<cac:Delivery>
				<xsl:for-each select="$var35_BavInvoice/*:AccountingCustomerParty[fn:namespace-uri() eq '']/*:DeliveryAddress[fn:namespace-uri() eq '']">
					<cac:DeliveryAddress>
						<xsl:for-each select="*:Floor[fn:namespace-uri() eq '']">
							<cbc:Floor>
								<xsl:sequence select="fn:string(.)"/>
							</cbc:Floor>
						</xsl:for-each>
						<xsl:for-each select="*:Room[fn:namespace-uri() eq '']">
							<cbc:Room>
								<xsl:sequence select="fn:string(.)"/>
							</cbc:Room>
						</xsl:for-each>
						<xsl:for-each select="*:StreetName[fn:namespace-uri() eq '']">
							<cbc:StreetName>
								<xsl:sequence select="fn:string(.)"/>
							</cbc:StreetName>
						</xsl:for-each>
						<xsl:for-each select="*:AdditionalStreetName[fn:namespace-uri() eq '']">
							<cbc:AdditionalStreetName>
								<xsl:sequence select="fn:string(.)"/>
							</cbc:AdditionalStreetName>
						</xsl:for-each>
						<xsl:for-each select="*:BlockName[fn:namespace-uri() eq '']">
							<cbc:BlockName>
								<xsl:sequence select="fn:string(.)"/>
							</cbc:BlockName>
						</xsl:for-each>
						<xsl:for-each select="*:BuildingNumber[fn:namespace-uri() eq '']">
							<cbc:BuildingNumber>
								<xsl:sequence select="fn:string(.)"/>
							</cbc:BuildingNumber>
						</xsl:for-each>
						<cbc:CityName>
							<xsl:sequence select="fn:string(*:CityName[fn:namespace-uri() eq ''])"/>
						</cbc:CityName>
						<cbc:PostalZone>
							<xsl:sequence select="fn:string(*:PostalZone[fn:namespace-uri() eq ''])"/>
						</cbc:PostalZone>
						<xsl:for-each select="*:District[fn:namespace-uri() eq '']">
							<cbc:District>
								<xsl:sequence select="fn:string(.)"/>
							</cbc:District>
						</xsl:for-each>
						<cac:AddressLine>
							<cbc:Line>
								<xsl:sequence select="fn:string(*:AddressLine[fn:namespace-uri() eq ''])"/>
							</cbc:Line>
						</cac:AddressLine>
						<xsl:variable name="var13_Country" as="node()" select="*:Country[fn:namespace-uri() eq '']"/>
						<cac:Country>
							<cbc:IdentificationCode>
								<xsl:sequence select="fn:string($var13_Country/*:IdentificationCode[fn:namespace-uri() eq ''])"/>
							</cbc:IdentificationCode>
							<cbc:Name>
								<xsl:sequence select="fn:string($var13_Country/*:Name[fn:namespace-uri() eq ''])"/>
							</cbc:Name>
						</cac:Country>
					</cac:DeliveryAddress>
				</xsl:for-each>
			</cac:Delivery>
			<xsl:for-each select="$var35_BavInvoice">
				<xsl:variable name="var14_PaymentMeans" as="node()" select="*:PaymentMeans[fn:namespace-uri() eq '']"/>
				<cac:PaymentMeans>
					<cbc:PaymentMeansCode>
						<xsl:sequence select="fn:string($var14_PaymentMeans/*:PaymentMeansCode[fn:namespace-uri() eq ''])"/>
					</cbc:PaymentMeansCode>
					<xsl:for-each select="$var14_PaymentMeans/*:PayerFinancialAccount[fn:namespace-uri() eq '']">
						<cac:PayerFinancialAccount>
							<xsl:for-each select="*:ID[fn:namespace-uri() eq '']">
								<cbc:ID>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:ID>
							</xsl:for-each>
							<xsl:for-each select="*:Name[fn:namespace-uri() eq '']">
								<cbc:Name>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:Name>
							</xsl:for-each>
							<xsl:for-each select="*:CurrencyCode[fn:namespace-uri() eq '']">
								<cbc:CurrencyCode>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:CurrencyCode>
							</xsl:for-each>
							<xsl:for-each select="*:FinancialInstitutionBranch[fn:namespace-uri() eq '']">
								<cac:FinancialInstitutionBranch>
									<xsl:for-each select="*:ID[fn:namespace-uri() eq '']">
										<cbc:ID>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:ID>
									</xsl:for-each>
									<xsl:for-each select="*:Name[fn:namespace-uri() eq '']">
										<cbc:Name>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:Name>
									</xsl:for-each>
								</cac:FinancialInstitutionBranch>
							</xsl:for-each>
							<xsl:for-each select="*:Country[fn:namespace-uri() eq '']">
								<cac:Country>
									<xsl:for-each select="*:IdentificationCode[fn:namespace-uri() eq '']">
										<cbc:IdentificationCode>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:IdentificationCode>
									</xsl:for-each>
									<xsl:for-each select="*:Name[fn:namespace-uri() eq '']">
										<cbc:Name>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:Name>
									</xsl:for-each>
								</cac:Country>
							</xsl:for-each>
						</cac:PayerFinancialAccount>
					</xsl:for-each>
					<xsl:for-each select="$var14_PaymentMeans/*:PayeeFinancialAccount[fn:namespace-uri() eq '']">
						<cac:PayeeFinancialAccount>
							<xsl:for-each select="*:ID[fn:namespace-uri() eq '']">
								<cbc:ID>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:ID>
							</xsl:for-each>
							<xsl:for-each select="*:Name[fn:namespace-uri() eq '']">
								<cbc:Name>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:Name>
							</xsl:for-each>
							<xsl:for-each select="*:CurrencyCode[fn:namespace-uri() eq '']">
								<cbc:CurrencyCode>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:CurrencyCode>
							</xsl:for-each>
							<xsl:for-each select="*:FinancialInstitutionBranch[fn:namespace-uri() eq '']">
								<cac:FinancialInstitutionBranch>
									<xsl:for-each select="*:ID[fn:namespace-uri() eq '']">
										<cbc:ID>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:ID>
									</xsl:for-each>
									<xsl:for-each select="*:Name[fn:namespace-uri() eq '']">
										<cbc:Name>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:Name>
									</xsl:for-each>
								</cac:FinancialInstitutionBranch>
							</xsl:for-each>
							<xsl:for-each select="*:Country[fn:namespace-uri() eq '']">
								<cac:Country>
									<cbc:IdentificationCode>
										<xsl:sequence select="fn:string(*:IdentificationCode[fn:namespace-uri() eq ''])"/>
									</cbc:IdentificationCode>
									<cbc:Name>
										<xsl:sequence select="fn:string(*:Name[fn:namespace-uri() eq ''])"/>
									</cbc:Name>
								</cac:Country>
							</xsl:for-each>
						</cac:PayeeFinancialAccount>
					</xsl:for-each>
				</cac:PaymentMeans>
			</xsl:for-each>
			<xsl:for-each select="$var35_BavInvoice">
				<xsl:variable name="var15_PricingExchangeRate" as="node()" select="*:PricingExchangeRate[fn:namespace-uri() eq '']"/>
				<cac:PricingExchangeRate>
					<cbc:SourceCurrencyCode>
						<xsl:sequence select="fn:string($var15_PricingExchangeRate/*:SourceCurrencyCode[fn:namespace-uri() eq ''])"/>
					</cbc:SourceCurrencyCode>
					<cbc:TargetCurrencyCode>
						<xsl:sequence select="fn:string($var15_PricingExchangeRate/*:TargetCurrencyCode[fn:namespace-uri() eq ''])"/>
					</cbc:TargetCurrencyCode>
					<cbc:CalculationRate>
						<xsl:sequence select="xs:string(xs:decimal(xs:float(fn:string($var15_PricingExchangeRate/*:CalculationRate[fn:namespace-uri() eq '']))))"/>
					</cbc:CalculationRate>
					<cbc:MathematicOperatorCode>
						<xsl:sequence select="fn:string($var15_PricingExchangeRate/*:MathematicOperatorCode[fn:namespace-uri() eq ''])"/>
					</cbc:MathematicOperatorCode>
				</cac:PricingExchangeRate>
			</xsl:for-each>
			<xsl:for-each select="$var35_BavInvoice">
				<xsl:variable name="var21_TaxTotal" as="node()" select="*:TaxTotal[fn:namespace-uri() eq '']"/>
				<xsl:variable name="var20_TaxSubtotal" as="node()+" select="$var21_TaxTotal/*:TaxSubtotal[fn:namespace-uri() eq '']"/>
				<cac:TaxTotal>
					<cbc:TaxAmount>
						<xsl:for-each select="$var20_TaxSubtotal">
							<xsl:attribute name="currencyID" namespace="" select="fn:string(*:CurrencyID[fn:namespace-uri() eq ''])"/>
						</xsl:for-each>
						<xsl:sequence select="xs:string(xs:decimal(fn:string($var21_TaxTotal/*:TaxAmount[fn:namespace-uri() eq ''])))"/>
					</cbc:TaxAmount>
					<xsl:for-each select="$var20_TaxSubtotal">
						<xsl:variable name="var19_CurrencyID_as_string" as="xs:string" select="fn:string(*:CurrencyID[fn:namespace-uri() eq ''])"/>
						<xsl:variable name="var17_TaxableAmount_as_decimal" as="xs:decimal" select="xs:decimal(fn:string(*:TaxableAmount[fn:namespace-uri() eq '']))"/>
						<xsl:variable name="var18_Percent_as_integer" as="xs:integer" select="xs:integer(fn:string(*:Percent[fn:namespace-uri() eq '']))"/>
						<cac:TaxSubtotal>
							<cbc:TaxableAmount>
								<xsl:attribute name="currencyID" namespace="" select="$var19_CurrencyID_as_string"/>
								<xsl:sequence select="xs:string($var17_TaxableAmount_as_decimal)"/>
							</cbc:TaxableAmount>
							<cbc:TaxAmount>
								<xsl:attribute name="currencyID" namespace="" select="$var19_CurrencyID_as_string"/>
								<xsl:sequence select="xs:string(fn:round(($var17_TaxableAmount_as_decimal * ($var18_Percent_as_integer div xs:decimal('100')))))"/>
							</cbc:TaxAmount>
							<cbc:Percent>
								<xsl:sequence select="xs:string($var18_Percent_as_integer)"/>
							</cbc:Percent>
							<xsl:variable name="var16_TaxCategory" as="node()" select="*:TaxCategory[fn:namespace-uri() eq '']"/>
							<cac:TaxCategory>
								<cbc:ID>
									<xsl:sequence select="fn:string($var16_TaxCategory/*:ID[fn:namespace-uri() eq ''])"/>
								</cbc:ID>
								<cbc:Name>
									<xsl:sequence select="fn:string($var16_TaxCategory/*:Name[fn:namespace-uri() eq ''])"/>
								</cbc:Name>
								<cbc:Percent>
									<xsl:sequence select="xs:string(xs:integer(fn:string($var16_TaxCategory/*:Percent[fn:namespace-uri() eq ''])))"/>
								</cbc:Percent>
								<cac:TaxScheme>
									<cbc:ID>
										<xsl:sequence select="fn:string($var16_TaxCategory/*:TaxScheme[fn:namespace-uri() eq '']/*:ID[fn:namespace-uri() eq ''])"/>
									</cbc:ID>
								</cac:TaxScheme>
							</cac:TaxCategory>
						</cac:TaxSubtotal>
					</xsl:for-each>
				</cac:TaxTotal>
			</xsl:for-each>
			<xsl:for-each select="$var35_BavInvoice">
				<xsl:variable name="var24_LegalMonetaryTotal" as="node()" select="*:LegalMonetaryTotal[fn:namespace-uri() eq '']"/>
				<xsl:variable name="var23_create_currencyID_of_TaxSubtotal" as="node()+">
					<xsl:for-each select="*:TaxTotal[fn:namespace-uri() eq '']/*:TaxSubtotal[fn:namespace-uri() eq '']">
						<xsl:attribute name="currencyID" namespace="" select="fn:string(*:CurrencyID[fn:namespace-uri() eq ''])"/>
					</xsl:for-each>
				</xsl:variable>
				<cac:LegalMonetaryTotal>
					<xsl:variable name="var22_LineExtensionAmount" as="node()" select="$var24_LegalMonetaryTotal/*:LineExtensionAmount[fn:namespace-uri() eq '']"/>
					<cbc:LineExtensionAmount>
						<xsl:for-each select="$var22_LineExtensionAmount/@CurrencyID">
							<xsl:attribute name="currencyID" namespace="" select="fn:string(.)"/>
						</xsl:for-each>
						<xsl:sequence select="xs:string(xs:decimal(xs:float(fn:string($var22_LineExtensionAmount))))"/>
					</cbc:LineExtensionAmount>
					<cbc:TaxExclusiveAmount>
						<xsl:sequence select="($var23_create_currencyID_of_TaxSubtotal, xs:string(xs:decimal(xs:float(fn:string($var24_LegalMonetaryTotal/*:TaxExclusiveAmount[fn:namespace-uri() eq ''])))))"/>
					</cbc:TaxExclusiveAmount>
					<cbc:TaxInclusiveAmount>
						<xsl:sequence select="($var23_create_currencyID_of_TaxSubtotal, xs:string(xs:decimal(xs:float(fn:string($var24_LegalMonetaryTotal/*:TaxInclusiveAmount[fn:namespace-uri() eq ''])))))"/>
					</cbc:TaxInclusiveAmount>
					<cbc:PayableAmount>
						<xsl:sequence select="($var23_create_currencyID_of_TaxSubtotal, xs:string(xs:decimal(xs:float(fn:string($var24_LegalMonetaryTotal/*:PayableAmount[fn:namespace-uri() eq ''])))))"/>
					</cbc:PayableAmount>
				</cac:LegalMonetaryTotal>
			</xsl:for-each>
			<xsl:for-each select="$var35_BavInvoice/*:InvoiceLine[fn:namespace-uri() eq '']">
				<xsl:variable name="var34_TaxTotal" as="node()?" select="*:TaxTotal[fn:namespace-uri() eq '']"/>
				<xsl:variable name="var32_resultof_vmf__inputtoresult" as="xs:string?">
					<xsl:call-template name="vmf:vmf3_inputtoresult">
						<xsl:with-param name="input" select="fn:string(*:UnitCode[fn:namespace-uri() eq ''])" as="xs:string"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:variable name="var33_create_unitCode_of_vmf__inputtoresult" as="node()?">
					<xsl:for-each select="$var32_resultof_vmf__inputtoresult">
						<xsl:attribute name="unitCode" namespace="" select="."/>
					</xsl:for-each>
				</xsl:variable>
				<cac:InvoiceLine>
					<cbc:ID>
						<xsl:sequence select="fn:string(*:ID[fn:namespace-uri() eq ''])"/>
					</cbc:ID>
					<cbc:InvoicedQuantity>
						<xsl:sequence select="($var33_create_unitCode_of_vmf__inputtoresult, xs:string(xs:decimal(fn:string(*:InvoicedQuantity[fn:namespace-uri() eq '']))))"/>
					</cbc:InvoicedQuantity>
					<xsl:variable name="var25_LineExtensionAmount" as="node()" select="*:LineExtensionAmount[fn:namespace-uri() eq '']"/>
					<cbc:LineExtensionAmount>
						<xsl:for-each select="$var25_LineExtensionAmount/@CurrencyID">
							<xsl:attribute name="currencyID" namespace="" select="fn:string(.)"/>
						</xsl:for-each>
						<xsl:sequence select="xs:string(xs:decimal(xs:float(fn:string($var25_LineExtensionAmount))))"/>
					</cbc:LineExtensionAmount>
					<xsl:for-each select="*:TaxPointDate[fn:namespace-uri() eq '']">
						<cbc:TaxPointDate>
							<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
						</cbc:TaxPointDate>
					</xsl:for-each>
					<xsl:for-each select="*:InvoicePeriod[fn:namespace-uri() eq '']">
						<cac:InvoicePeriod>
							<xsl:for-each select="*:StartDate[fn:namespace-uri() eq '']">
								<cbc:StartDate>
									<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
								</cbc:StartDate>
							</xsl:for-each>
							<xsl:for-each select="*:EndDate[fn:namespace-uri() eq '']">
								<cbc:EndDate>
									<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
								</cbc:EndDate>
							</xsl:for-each>
							<xsl:for-each select="*:Description[fn:namespace-uri() eq '']">
								<cbc:Description>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:Description>
							</xsl:for-each>
						</cac:InvoicePeriod>
					</xsl:for-each>
					<xsl:for-each select="*:BillingReference[fn:namespace-uri() eq '']">
						<cac:BillingReference>
							<xsl:for-each select="*:InvoiceDocumentReference[fn:namespace-uri() eq '']">
								<cac:InvoiceDocumentReference>
									<cbc:ID>
										<xsl:sequence select="fn:string(*:ID[fn:namespace-uri() eq ''])"/>
									</cbc:ID>
									<cbc:DocumentDescription>
										<xsl:sequence select="fn:string(*:DocumentDescription[fn:namespace-uri() eq ''])"/>
									</cbc:DocumentDescription>
								</cac:InvoiceDocumentReference>
							</xsl:for-each>
							<xsl:for-each select="*:BillingReferenceLine[fn:namespace-uri() eq '']">
								<cac:BillingReferenceLine>
									<cbc:ID>
										<xsl:sequence select="fn:string(*:ID[fn:namespace-uri() eq ''])"/>
									</cbc:ID>
								</cac:BillingReferenceLine>
							</xsl:for-each>
						</cac:BillingReference>
					</xsl:for-each>
					<xsl:for-each select="*:PaymentTerms[fn:namespace-uri() eq '']">
						<cac:PaymentTerms>
							<cbc:Note>
								<xsl:sequence select="fn:string(*:Note[fn:namespace-uri() eq ''])"/>
							</cbc:Note>
						</cac:PaymentTerms>
					</xsl:for-each>
					<xsl:for-each select="*:AllowanceCharge[fn:namespace-uri() eq '']">
						<cac:AllowanceCharge>
							<xsl:for-each select="*:ChargeIndicator[fn:namespace-uri() eq '']">
								<cbc:ChargeIndicator>
									<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
								</cbc:ChargeIndicator>
							</xsl:for-each>
							<xsl:for-each select="*:AllowanceChargeReason[fn:namespace-uri() eq '']">
								<cbc:AllowanceChargeReason>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:AllowanceChargeReason>
							</xsl:for-each>
							<xsl:for-each select="*:MultiplierFactorNumeric[fn:namespace-uri() eq '']">
								<cbc:MultiplierFactorNumeric>
									<xsl:sequence select="xs:string(xs:decimal(xs:float(fn:string(.))))"/>
								</cbc:MultiplierFactorNumeric>
							</xsl:for-each>
							<xsl:for-each select="*:Amount[fn:namespace-uri() eq '']">
								<cbc:Amount>
									<xsl:for-each select="$var34_TaxTotal/*:TaxSubtotal[fn:namespace-uri() eq '']">
										<xsl:attribute name="currencyID" namespace="" select="fn:string(*:CurrencyID[fn:namespace-uri() eq ''])"/>
									</xsl:for-each>
									<xsl:sequence select="xs:string(xs:decimal(xs:float(fn:string(.))))"/>
								</cbc:Amount>
							</xsl:for-each>
						</cac:AllowanceCharge>
					</xsl:for-each>
					<xsl:for-each select="$var34_TaxTotal">
						<xsl:variable name="var28_TaxSubtotal" as="node()+" select="*:TaxSubtotal[fn:namespace-uri() eq '']"/>
						<cac:TaxTotal>
							<cbc:TaxAmount>
								<xsl:for-each select="$var28_TaxSubtotal">
									<xsl:attribute name="currencyID" namespace="" select="fn:string(*:CurrencyID[fn:namespace-uri() eq ''])"/>
								</xsl:for-each>
								<xsl:sequence select="xs:string(xs:decimal(fn:string(*:TaxAmount[fn:namespace-uri() eq ''])))"/>
							</cbc:TaxAmount>
							<xsl:for-each select="$var28_TaxSubtotal">
								<xsl:variable name="var27_CurrencyID_as_string" as="xs:string" select="fn:string(*:CurrencyID[fn:namespace-uri() eq ''])"/>
								<cac:TaxSubtotal>
									<cbc:TaxableAmount>
										<xsl:attribute name="currencyID" namespace="" select="$var27_CurrencyID_as_string"/>
										<xsl:sequence select="xs:string(xs:decimal(fn:string(*:TaxableAmount[fn:namespace-uri() eq ''])))"/>
									</cbc:TaxableAmount>
									<cbc:TaxAmount>
										<xsl:attribute name="currencyID" namespace="" select="$var27_CurrencyID_as_string"/>
										<xsl:sequence select="xs:string(fn:round(xs:decimal(fn:string(*:TaxAmount[fn:namespace-uri() eq '']))))"/>
									</cbc:TaxAmount>
									<cbc:Percent>
										<xsl:sequence select="xs:string(xs:integer(fn:string(*:Percent[fn:namespace-uri() eq ''])))"/>
									</cbc:Percent>
									<xsl:variable name="var26_TaxCategory" as="node()" select="*:TaxCategory[fn:namespace-uri() eq '']"/>
									<cac:TaxCategory>
										<cbc:ID>
											<xsl:sequence select="fn:string($var26_TaxCategory/*:ID[fn:namespace-uri() eq ''])"/>
										</cbc:ID>
										<cbc:Name>
											<xsl:sequence select="fn:string($var26_TaxCategory/*:Name[fn:namespace-uri() eq ''])"/>
										</cbc:Name>
										<cbc:Percent>
											<xsl:sequence select="xs:string(xs:integer(fn:string($var26_TaxCategory/*:Percent[fn:namespace-uri() eq ''])))"/>
										</cbc:Percent>
										<cac:TaxScheme>
											<cbc:ID>
												<xsl:sequence select="fn:string($var26_TaxCategory/*:TaxScheme[fn:namespace-uri() eq '']/*:ID[fn:namespace-uri() eq ''])"/>
											</cbc:ID>
										</cac:TaxScheme>
									</cac:TaxCategory>
								</cac:TaxSubtotal>
							</xsl:for-each>
						</cac:TaxTotal>
					</xsl:for-each>
					<xsl:variable name="var30_Item" as="node()" select="*:Item[fn:namespace-uri() eq '']"/>
					<cac:Item>
						<cbc:Name>
							<xsl:sequence select="fn:string($var30_Item/*:Name[fn:namespace-uri() eq ''])"/>
						</cbc:Name>
						<xsl:for-each select="*:AdditionalInformation[fn:namespace-uri() eq '']">
							<cbc:AdditionalInformation>
								<xsl:sequence select="fn:string(.)"/>
							</cbc:AdditionalInformation>
						</xsl:for-each>
						<xsl:for-each select="$var30_Item/*:SellersItemIdentification[fn:namespace-uri() eq '']">
							<cac:SellersItemIdentification>
								<xsl:for-each select="*:ID[fn:namespace-uri() eq '']">
									<cbc:ID>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:ID>
								</xsl:for-each>
							</cac:SellersItemIdentification>
						</xsl:for-each>
						<xsl:variable name="var29_ClassifiedTaxCategory" as="node()" select="$var30_Item/*:ClassifiedTaxCategory[fn:namespace-uri() eq '']"/>
						<cac:ClassifiedTaxCategory>
							<cbc:ID>
								<xsl:sequence select="fn:string($var29_ClassifiedTaxCategory/*:ID[fn:namespace-uri() eq ''])"/>
							</cbc:ID>
							<cbc:Name>
								<xsl:sequence select="fn:string($var29_ClassifiedTaxCategory/*:Name[fn:namespace-uri() eq ''])"/>
							</cbc:Name>
							<cbc:Percent>
								<xsl:sequence select="xs:string(xs:integer(fn:string($var29_ClassifiedTaxCategory/*:Percent[fn:namespace-uri() eq ''])))"/>
							</cbc:Percent>
							<cac:TaxScheme>
								<cbc:ID>
									<xsl:sequence select="fn:string($var29_ClassifiedTaxCategory/*:TaxScheme[fn:namespace-uri() eq '']/*:ID[fn:namespace-uri() eq ''])"/>
								</cbc:ID>
							</cac:TaxScheme>
						</cac:ClassifiedTaxCategory>
						<xsl:for-each select="$var30_Item/*:AdditionalItemProperty[fn:namespace-uri() eq '']">
							<cac:AdditionalItemProperty>
								<cbc:ID>
									<xsl:sequence select="fn:string(*:ID[fn:namespace-uri() eq ''])"/>
								</cbc:ID>
								<cbc:Name>
									<xsl:sequence select="fn:string(*:Name[fn:namespace-uri() eq ''])"/>
								</cbc:Name>
								<cbc:Value>
									<xsl:sequence select="fn:string(*:Value[fn:namespace-uri() eq ''])"/>
								</cbc:Value>
							</cac:AdditionalItemProperty>
						</xsl:for-each>
					</cac:Item>
					<xsl:variable name="var31_Price" as="node()" select="*:Price[fn:namespace-uri() eq '']"/>
					<cac:Price>
						<cbc:PriceAmount>
							<xsl:attribute name="currencyID" namespace="" select="fn:string($var31_Price/*:CurrencyID[fn:namespace-uri() eq ''])"/>
							<xsl:sequence select="xs:string(xs:decimal(fn:string($var31_Price/*:PriceAmount[fn:namespace-uri() eq ''])))"/>
						</cbc:PriceAmount>
						<cbc:BaseQuantity>
							<xsl:sequence select="($var33_create_unitCode_of_vmf__inputtoresult, xs:string(xs:decimal(fn:string($var31_Price/*:BaseQuantity[fn:namespace-uri() eq '']))))"/>
						</cbc:BaseQuantity>
					</cac:Price>
				</cac:InvoiceLine>
			</xsl:for-each>
		</Invoice>
	</xsl:template>
</xsl:stylesheet>
